"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var sqlite = require("nativescript-sqlite");
var visit_1 = require("./visit");
var VisitDatabaseService = (function () {
    function VisitDatabaseService() {
        console.log("In Visit DB Service Constructor");
    }
    // create a table
    VisitDatabaseService.prototype.createTable = function () {
        new sqlite("visit.db", function (err, db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS Visit (id INTEGER PRIMARY KEY, customer_id TEXT, beacon TEXT, start DATETIME,end DATETIME,creating NUMERIC, active NUMERIC, keywords JSON )", [], function (err) {
                console.log("TABLE Visit CREATED");
                return true;
            });
        });
    };
    // drops a table
    VisitDatabaseService.prototype.dropTable = function () {
        new sqlite("visit.db", function (err, db) {
            db.execSQL("DROP TABLE IF EXISTS Visit", [], function (err) {
                console.log("TABLE Visit DROPPED");
                return true;
            });
        });
    };
    VisitDatabaseService.prototype.insertVisit = function (visit) {
        console.log("Attempting to insert: " + visit.id);
        new sqlite("visit.db", function (err, db) {
            db.execSQL("INSERT INTO Visit (id,customer_id,  beacon , start ,end ,creating , active , keywords ) VALUES (?,?,?,?,?,?,?,?)", [visit.id, visit.customer_id, visit.beacon, visit.start, visit.end, visit.creating, visit.active, visit.keywords], function (err, id) {
                console.log("The new record with id " + id + " and beacon " + visit.beacon);
                return true;
            });
        });
    };
    // update an existing record
    VisitDatabaseService.prototype.updateVisit = function (id, customer_id, beacon, start, end, creating, active, keywords) {
        new sqlite("visit.db", function (err, db) {
            db.execSQL("UPDATE Visit SET customer_id = ?, beacon = ?, start = ?, end = ?, creating = ?, active = ?, keywords = ? WHERE id = ?", [customer_id, beacon, start, end, creating, active, keywords, id], function (err, id) {
                console.log("The existing record id is: " + id);
                return true;
            });
        });
    };
    // delete a record
    VisitDatabaseService.prototype.deleteVisit = function (id) {
        console.log("About to delete visit from db: " + id);
        new sqlite("visit.db", function (err, db) {
            db.execSQL("DELETE FROM Visit WHERE id = ?", [id], function (err, id) {
                console.log("The deleted record id is: " + id);
                return true;
            });
        });
    };
    // select a single record
    VisitDatabaseService.prototype.selectVisit = function (id) {
        var record;
        new sqlite("visit.db", function (err, db) {
            db.get("SELECT * FROM Visit WHERE id = ?", [id], function (err, row) {
                // console.log("Row of data was: " + row);  // Prints [["Field1", "Field2",...]] 
                // console.log("1: "+row[1]);
                record = row;
                // return row;
            });
        });
        return record;
    };
    // select a single record
    VisitDatabaseService.prototype.selectVisitByBeacon = function (beacon) {
        console.log("select beacon: " + beacon);
        var record;
        new sqlite("visit.db", function (err, db) {
            db.get("SELECT * FROM Visit WHERE beacon = ?", [beacon], function (err, row) {
                // console.log("Row of data was: " + row);  // Prints [["Field1", "Field2",...]] 
                // console.log("1: "+row[1]);
                record = row;
                // return row;
            });
        });
        console.log("record (visit):" + record);
        return record;
    };
    // select all records
    VisitDatabaseService.prototype.selectVisits = function () {
        var visits = new Array();
        new sqlite("visit.db", function (err, db) {
            db.all("SELECT * FROM Visit ORDER BY id", [], function (err, rs) {
                rs.forEach(function (element) {
                    // console.log("E0: "+element[0]);
                    // console.log("E1: "+element[1]);
                    // console.log("E2: "+element[2]);
                    // console.log("E3: "+element[3]);
                    // console.log("E4: "+element[4]);
                    // console.log("E5: "+element[5]);
                    // console.log("E6: "+element[6]);
                    // console.log("E7: "+element[7]);
                    var visitObj = new visit_1.Visit(element[1], element[2], element[3], element[4]);
                    visitObj.id = element[0];
                    visitObj.creating = element[5];
                    visitObj.active = element[6];
                    visitObj.keywords = element[7];
                    visits.push(visitObj);
                });
            });
        });
        return visits;
    };
    VisitDatabaseService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], VisitDatabaseService);
    return VisitDatabaseService;
}());
exports.VisitDatabaseService = VisitDatabaseService;
//# sourceMappingURL=data:application/json;base64,