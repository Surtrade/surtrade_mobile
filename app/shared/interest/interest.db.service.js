"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var sqlite = require("nativescript-sqlite");
var interest_1 = require("./interest");
var InterestDatabaseService = (function () {
    function InterestDatabaseService() {
        console.log("In Interest DB Service Constructor");
    }
    // create a table
    InterestDatabaseService.prototype.createTable = function () {
        new sqlite("interest.db", function (err, db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS Interest (id INTEGER PRIMARY KEY, customer_id TEXT, beacon TEXT, start DATETIME,end DATETIME,creating NUMERIC, active NUMERIC, keywords JSON )", [], function (err) {
                console.log("TABLE Interest CREATED");
                return true;
            });
        });
    };
    // drops a table
    InterestDatabaseService.prototype.dropTable = function () {
        new sqlite("interest.db", function (err, db) {
            db.execSQL("DROP TABLE IF EXISTS Interest", [], function (err) {
                console.log("TABLE Interest DROPPED");
                return true;
            });
        });
    };
    InterestDatabaseService.prototype.insertInterest = function (interest) {
        console.log("Attempting to insert: " + interest.id);
        new sqlite("interest.db", function (err, db) {
            db.execSQL("INSERT INTO Interest (id,customer_id,  beacon , start ,end ,creating , active , keywords ) VALUES (?,?,?,?,?,?,?,?)", [interest.id, interest.customer_id, interest.beacon, interest.start, interest.end, interest.creating, interest.active, interest.keywords], function (err, id) {
                console.log("The new record with id " + id + " and beacon " + interest.beacon);
                return true;
            });
        });
    };
    // update an existing record
    InterestDatabaseService.prototype.updateInterest = function (id, customer_id, beacon, start, end, creating, active, keywords) {
        new sqlite("interest.db", function (err, db) {
            db.execSQL("UPDATE Interest SET customer_id = ?, beacon = ?, start = ?, end = ?, creating = ?, active = ?, keywords = ? WHERE id = ?", [customer_id, beacon, start, end, creating, active, keywords, id], function (err, id) {
                console.log("The existing record id is: " + id);
                return true;
            });
        });
    };
    // delete a record
    InterestDatabaseService.prototype.deleteInterest = function (id) {
        new sqlite("interest.db", function (err, db) {
            db.execSQL("DELETE FROM Interest WHERE id = ?", [id], function (err, id) {
                console.log("The deleted record id is: " + id);
                return true;
            });
        });
    };
    // select a single record
    InterestDatabaseService.prototype.selectInterest = function (id) {
        var record;
        new sqlite("interest.db", function (err, db) {
            db.get("SELECT * FROM Interest WHERE id = ?", [id], function (err, row) {
                // console.log("Row of data was: " + row);  // Prints [["Field1", "Field2",...]] 
                // console.log("1: "+row[1]);
                record = row;
                // return row;
            });
        });
        return record;
    };
    // select a single record
    InterestDatabaseService.prototype.selectInterestByBeacon = function (beacon) {
        console.log("select beacon: " + beacon);
        var record;
        new sqlite("interest.db", function (err, db) {
            db.get("SELECT * FROM Interest WHERE beacon = ?", [beacon], function (err, row) {
                // console.log("Row of data was: " + row);  // Prints [["Field1", "Field2",...]] 
                // console.log("1: "+row[1]);
                record = row;
                // return row;
            });
        });
        console.log("record:" + record);
        return record;
    };
    // select all records
    InterestDatabaseService.prototype.selectInterests = function () {
        var interests = new Array();
        new sqlite("interest.db", function (err, db) {
            db.all("SELECT * FROM Interest ORDER BY id", [], function (err, rs) {
                rs.forEach(function (element) {
                    console.log("E0: " + element[0]);
                    console.log("E1: " + element[1]);
                    console.log("E2: " + element[2]);
                    console.log("E3: " + element[3]);
                    console.log("E4: " + element[4]);
                    console.log("E5: " + element[5]);
                    console.log("E6: " + element[6]);
                    console.log("E7: " + element[7]);
                    var interestObj = new interest_1.Interest(element[1], element[2], element[3], element[4]);
                    interestObj.id = element[0];
                    interestObj.creating = element[5];
                    interestObj.active = element[6];
                    interestObj.keywords = element[7];
                    interests.push(interestObj);
                });
            });
        });
        return interests;
    };
    InterestDatabaseService.prototype.finishInterests = function () {
        var _this = this;
        var finishedInterests = Array();
        // Retrive all interests (should be max 1)
        var interests = this.selectInterests();
        console.log("how many intersts to finish: " + interests.length);
        // if there is an interest 
        if (interests.length > 0) {
            interests.forEach(function (interest) {
                var start = new Date(interest.start);
                var end = new Date(interest.end);
                var duration = end.getTime() - start.getTime();
                var sinceLast = new Date().getTime() - end.getTime();
                console.log("Interest: " + interest.beacon + ", sinceLast: " + sinceLast + ", duration: " + duration);
                // if duration  > 1 minute then send interest
                if (duration > 60000) {
                    // console.log("Sending interest b: "+interest.beacon)
                    // console.log("Actual implementation pending..");
                    finishedInterests.push(interest);
                }
                console.log("Deleting interest due to expiring contract: " + interest.beacon);
                _this.deleteInterest(interest.id);
            });
        }
        return finishedInterests;
    };
    InterestDatabaseService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], InterestDatabaseService);
    return InterestDatabaseService;
}());
exports.InterestDatabaseService = InterestDatabaseService;
//# sourceMappingURL=data:application/json;base64,